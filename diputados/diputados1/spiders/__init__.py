# This package will contain the spiders of your Scrapy project
#
# Please refer to the documentation for information on how to create and manage
# your spiders.

from scrapy.spiders import CrawlSpider, Spider, Rule
from scrapy.linkextractors import LinkExtractor
from scrapy.selector import Selector
from scrapy import Request, FormRequest
import logging
from time import sleep
    
class SpiderSp(Spider):
	name = "diputado"
	start_urls = ['http://www.camara.cl/diputados/diputados.aspx']

	def parse(self, response):
		xp = '//article[@class = "grid-2"]/h4/a/@href'
		for url in response.xpath(xp).extract()[:2]:
			yield (Request('https://www.camara.cl/diputados/' + url, callback=self.parse_manga_list_page))

	def parse_manga_list_page(self, response):
		xp_form = '//*[@id="menu-acordeon"]/li[3]/ul/li[1]/a/@href'
		for url in response.xpath(xp_form).extract()[:2]:
			yield (Request('https://www.camara.cl/diputados/detalle/'+url, callback=self.parse_box))

	def parse_box(self, response):
		diputadoId = response.url.split("prmId=")[1]
		validationXp = '//*[@id="__EVENTVALIDATION"]/@value'
		viewStateXp = '//*[@id="__VIEWSTATE"]/@value'
		viewStateGeneratorXp = '//*[@id="__VIEWSTATEGENERATOR"]/@value'

		eventValidation = response.xpath(validationXp).extract()[0]
		viewState = response.xpath(viewStateXp).extract()[0]
		viewStateGenerator = response.xpath(viewStateGeneratorXp).extract()[0]
		# logging.info(viewStateGenerator)
		# logging.info(viewState)
		for mes in range(1,3):
			req = FormRequest(response.url,
				method='POST',
				headers={
				"Accept": "*/*","Accept-Encoding": "gzip, deflate, br", 
				"Accept-Language": "es-ES,es;q=0.9,en;q=0.8",
				"Cache-Control": "no-cache" , "Connection": "keep-alive",
				"Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
				"Cookie": "_ga=GA1.2.1964487235.1594267649; _gid=GA1.2.615547272.1594267649; _gat=1",
				"Host": "www.camara.cl",
				"Origin": "https://www.camara.cl",
				# "Referer": "https://www.camara.cl/diputados/detalle/gastosoperacionales.aspx?prmId=1020",
				"Sec-Fetch-Dest": "empty",
				"Sec-Fetch-Mode": "cors",
				"Sec-Fetch-Site": "same-origin",
				"User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36",
				"X-MicrosoftAjax": "Delta=true",
				"X-Requested-With": "XMLHttpRequest"
				}, 
				formdata = {
				"ctl00$ctl00$ctl00$ContentPlaceHolder1$ContentPlaceHolder1$ScriptManager1":"ctl00$ctl00$ctl00$ContentPlaceHolder1$ContentPlaceHolder1$DetallePlaceHolder$UpdatePanel1|ctl00$ctl00$ctl00$ContentPlaceHolder1$ContentPlaceHolder1$DetallePlaceHolder$ddlMes",
				"ctl00$ctl00$ctl00$ContentPlaceHolder1$ContentPlaceHolder1$ddlDiputados": str(diputadoId),
				"ctl00$ctl00$ctl00$ContentPlaceHolder1$ContentPlaceHolder1$DetallePlaceHolder$ddlMes": str(mes),
				"ctl00$ctl00$ctl00$ContentPlaceHolder1$ContentPlaceHolder1$DetallePlaceHolder$ddlAno": "2019",
				# "__EVENTTARGET": 'eventTarget',
				"__EVENTTARGET":"ctl00$ctl00$ctl00$ContentPlaceHolder1$ContentPlaceHolder1$DetallePlaceHolder$ddlMes",
				# "__EVENTARGUMENT": '',
				"__EVENTARGUMENT":"",
				"__VIEWSTATEGENERATOR": str(viewStateGenerator),
				# "__VIEWSTATEGENERATOR":"63C08B23",
				"__VIEWSTATE": str(viewState),
				# "__VIEWSTATE":"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",
				"__LASTFOCUS":"",
				"__EVENTVALIDATION": str(eventValidation),
				# "__EVENTVALIDATION":"XcGSEtAdUhqODsHcWngXF/+ve/B0f97oXEo6z44MLsvk3Bch3O4SF3SSFyS+wp5ltyZpZoj8qRQE12vc0WAWWNRc8wCE3vgKMCQqL8ls/T9nTD9BKidhwvQPbp4hVC+ZO7zTjod/9QonJTZvuLeZ9R/XYJWzXYJYdOngkoP5JccefikrMOpmZnh+YTitEPjjA4w8Z+mJOnJXYzWee50ct6DInGUrJ23bbnMX8dCbKYsakvUKb/DmxXgdT3Pw/7fuLNwaSrJNa2716k3d/vcvIIEgdRaX2Piry0ZLyx+Pvcov9i7ZiYvxS9IJLXrBKn2H0PIAvRt6Ss2CdO2oIW2aWvN8ZWDqKCxVb0FSG7jDTXQ4TQeFKVzFtt2ExmHs1S/mzn19V3cPJMFwPeGEMSUiEBq9KbR40jkt34dZe5lH1D+d37i8YvBgaPOTuhTrTunHYitQc0+Hz4PEEDf1KnbxsCVxeNhtLr26bXS4861OLwxACxFWAPtDx8WaeUz0OyOGaCbDECIH32LVZ+hKfPSJnFyT0ba/xvETx4Iz4LX3fI0XRUgJDdZA2IVgB1P96xdnZItchl4yiAXtdEtPG8t8yHErbJMfrdexQz2TVKiIOEi1ZghR7znMgJsBfTyWCIh/Rr4/ir8SdmoGkY7HmruhB87IhBylVake6YynChz2wSCSq+RxahWXlHxVhremCUte1tVLnGGw3Pi2WFjlCtubGft5TXUOuTdQDgJAUX7wvnRPDoE1fbTaVxf1uYgvIe9lmwWNfLWCHJMCsHiVhzTJn7XW/uahruHkXA2A9Nz2fNH7m/whN/hBSEYKwlQ6YvtjDf9fnk144J7KTTeYnc2mpRkxFQlAO3fgrJ8wBeSGG/QXzTZOiQIva1BUxb/wZ5NmhjjecSEGyv9mDkiXADLtVWFbEmcr7UTvIrBmIrmYXfraMsKG+KDEaJ1rum+GIXOM9Z6jpQ3AwoZJYXrsNFx+r5pTfLaTF2wY5PLZVJM/bTQzjieEQe6TXGJYwBr3+6IlSdCuFV8yCm+D2rwFGfWE3SjWAdzDBApwQV+d94TdZ4uT16zsbTkAk+MA61TxolpPXhjy6hRUEQkKIIVY75UkFudQCricgc90Zj+YMpdqMFTqG+UDqn2062FlJyCsJOAXSvgJCmqJpI/YHxEM/mf/Nh97T6TO/3l6nfmQmwFrZl2BS9FhXKwHulbnfYoK3LCXw \
					# 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","__ASYNCPOST":"true"
				},
				callback=self.parse_table)
			yield req

	def parse_table(self, response):
		selector = Selector(text=response.text)
		print(response.url)
		print(response.body)
		sleep(1)

		# yield response
